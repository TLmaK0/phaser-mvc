// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@reactivex/rxjs

import { Observable } from '@reactivex/rxjs';
import { Observable, Observer } from '@reactivex/rxjs';

export interface BaseEngine {
    preload(): void;
    create(): void;
    update(): void;
    render(): void;
}

/**
  * Controller accepts input from view and converts modifieds the model.
  */
export abstract class Controller {
}

export class Guid {
    static newGuid(): string;
}

export class ViewNotifier<T> {
    constructor();
    subscribe(observer: (t: T) => void): void;
    publish(value?: T): void;
}

/**
    * Adds a component to the view and other view components
    */
export class ViewComponentAdder<T> {
        constructor(components: ViewComponent<T>[], view: View<T>);
        addComponent<S extends ViewComponent<T>>(component: S): S;
}
/**
    * Input and ouput for the application
    */
export abstract class View<T> {
        protected components: ViewComponent<T>[];
        constructor(witcase?: Witcase<T>);
        create(_componentAdder: ViewComponentAdder<T>): void;
        preload(): void;
        update(): void;
        render(): void;
        show(): void;
        readonly engine: T;
        preloadView(): void;
        updateView(): void;
        renderView(): void;
        updateOnModelChange(_watchFactory: WatchFactory): void;
}
/**
    * Component to be showed in view
    */
export abstract class ViewComponent<T> {
        view: View<T>;
        protected components: ViewComponent<T>[];
        preload(): void;
        create(_componentAdder: ViewComponentAdder<T>): void;
        update(): void;
        render(): void;
        preloadComponent(): void;
        createComponent(componentAdder: ViewComponentAdder<T>, view: View<T>): void;
        updateComponent(): void;
        renderComponent(): void;
        protected readonly engine: T;
}

export class WatchFactory {
    watchsModel: WatchModel<any>[];
    constructor();
    create<T>(getModel: () => T): Observable<T>;
}

export class WatchModel<T> {
    observable: Observable<T>;
    observer: Observer<() => T>;
    getModel: () => T;
}

export class Witcase<T> implements BaseEngine {
    engine: T;
    defaultAction: () => void;
    static current: any;
    static create<T>(): any;
    start(engineStarter: (baseEngine: BaseEngine) => T): void;
    create: () => void;
    preload: () => void;
    update: () => void;
    render: () => void;
    registerView(view: View<T>): void;
}

