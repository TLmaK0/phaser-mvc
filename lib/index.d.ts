// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../phaser-ce
//   ../../@reactivex/rxjs

import * as Phaser from 'phaser-ce';
import { AsyncSubject } from '@reactivex/rxjs';
import { Observable } from '@reactivex/rxjs';
import { Observable, Observer } from '@reactivex/rxjs';

export function BodyProperty(target: any, key: string): void;

/**
  */
export class Bootstrap {
    game: Phaser.Game;
    static worldConfiguration: any;
    static readonly instance: Bootstrap;
    static onInit: AsyncSubject<Bootstrap>;
    constructor();
    static preload(preload: (game: Phaser.Game) => void): void;
    static run(defaultAction: () => void): void;
    preload: () => void;
    create: () => void;
    update: () => void;
    registerView(view: View): void;
    createBody(physicBody: PhysicBody): Phaser.Physics.P2.Body;
}

/**
  * Controller accepts input from view and converts modifieds the model.
  */
export abstract class Controller {
}

export class Guid {
    static newGuid(): string;
}

/**
  */
export abstract class PhysicBody {
    x: number;
    y: number;
    angle: number;
    velocity: [number, number];
    mass: number;
    protected physics: any;
    constructor();
    createBody(_body: Phaser.Physics.P2.Body): void;
    protected onBootstrapInit(bootstrap: Bootstrap): void;
    getPhysicsConfiguration(): any;
}

export class ViewNotifier<T> {
    constructor();
    subscribe(observer: (t: T) => void): void;
    publish(value?: T): void;
}

/**
    * Adds a component to the view and other view components
    */
export class ViewComponentAdder {
        constructor(components: ViewComponent[], view: View);
        addComponent<T extends ViewComponent>(component: T): T;
}
/**
    * Input and ouput for the application
    */
export abstract class View {
        protected components: ViewComponent[];
        constructor(bootstrap?: Bootstrap);
        refresh(): void;
        create(_componentAdder: ViewComponentAdder): void;
        preload(): void;
        update(): void;
        show(): void;
        readonly game: Phaser.Game;
        updateView(): void;
        updateOnModelChange(_watchFactory: WatchFactory): void;
}
/**
    * Component to be showed in view
    */
export abstract class ViewComponent {
        view: View;
        protected components: ViewComponent[];
        create(_componentAdder: ViewComponentAdder): void;
        update(): void;
        createComponent(componentAdder: ViewComponentAdder, view: View): void;
        updateComponent(): void;
        protected readonly game: Phaser.Game;
}

export class WatchFactory {
    watchsModel: WatchModel<any>[];
    constructor();
    create<T>(getModel: () => T): Observable<T>;
}

export class WatchModel<T> {
    observable: Observable<T>;
    observer: Observer<() => T>;
    getModel: () => T;
}

