(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bootstrap_1 = __webpack_require__(2);
exports.Bootstrap = bootstrap_1.Bootstrap;
var controller_1 = __webpack_require__(4);
exports.Controller = controller_1.Controller;
var view_1 = __webpack_require__(5);
exports.View = view_1.View;
exports.ViewComponent = view_1.ViewComponent;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Phaser = __webpack_require__(3);
/** Bootstrap for the phaser-mvc.
 * Useage:
 * import { FrameController } from 'phaser-mvc';
 * import { LandEditorController } from 'phaser-mvc';
 * window.onload = () => {
 * const boot = new Bootstrap();
 * boot.addController('FrameController', FrameController);
 */
var Bootstrap = /** @class */ (function () {
    function Bootstrap(width, height) {
        if (width === void 0) { width = 1920; }
        if (height === void 0) { height = 1080; }
        var _this = this;
        this.width = width;
        this.height = height;
        this.controllers = {};
        this.preload = function () {
            for (var _i = 0, _a = Bootstrap.preloadComponents; _i < _a.length; _i++) {
                var preload = _a[_i];
                preload(_this.game);
            }
        };
        this.create = function () {
            _this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            _this.goTo(_this.startAction[0], _this.startAction[1], _this.startAction[2]);
        };
        this.update = function () {
            for (var _i = 0, _a = Object.keys(_this.controllers); _i < _a.length; _i++) {
                var controllerName = _a[_i];
                _this.updateController(_this.controllers[controllerName]);
            }
        };
    }
    Bootstrap.preload = function (preload) {
        Bootstrap.preloadComponents.push(preload);
    };
    Bootstrap.prototype.start = function (controllerName, controllerAction, params) {
        this.startAction = [controllerName, controllerAction, params];
        this.game = new Phaser.Game(this.width, this.height, Phaser.CANVAS, 'content', { preload: this.preload,
            create: this.create,
            update: this.update });
    };
    Bootstrap.prototype.addController = function (name, controllerType) {
        if (this.controllers[name] != null)
            throw EvalError("Controller " + name + " already registered.");
        var controller = new controllerType();
        controller.bootstrap = this;
        this.controllers[name] = controller;
    };
    Bootstrap.prototype.goTo = function (controllerName, controllerAction, params) {
        /*tslint:disable:no-any*/
        var controller = this.controllers[controllerName];
        /*tslint:enable:no-any*/
        if (!controller) {
            throw EvalError("Controller " + controllerName + " not exist. Be sure you load it in bootstrap.");
        }
        /*tslint:disable:no-unsafe-any*/
        controller[controllerAction](params);
        /*tslint:enable:no-unsafe-any*/
    };
    Bootstrap.prototype.updateController = function (controller) {
        for (var _i = 0, _a = Object.keys(controller.views); _i < _a.length; _i++) {
            var viewName = _a[_i];
            controller.getView(viewName).updateView();
        }
    };
    Bootstrap.preloadComponents = [];
    return Bootstrap;
}());
exports.Bootstrap = Bootstrap;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("phaser-ce");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Controller accepts input from view and converts modifieds the model.
 */
var Controller = /** @class */ (function () {
    function Controller() {
        var _this = this;
        this.views = {};
        this.model = {};
        this.goTo = function (controllerName, controllerAction, params) {
            _this.bootstrap.goTo(controllerName, controllerAction, params);
        };
    }
    Object.defineProperty(Controller.prototype, "game", {
        get: function () {
            return this.bootstrap.game;
        },
        enumerable: true,
        configurable: true
    });
    Controller.prototype.getView = function (viewName) {
        var view = this.views[viewName];
        if (view == null) {
            throw EvalError("View " + viewName + " not exist. Be sure you have added it to your controller.");
        }
        return view;
    };
    Controller.prototype.render = function (view) {
        view.init(this.game, this.model, this.goTo);
    };
    Controller.prototype.refresh = function (view) {
        view.refresh();
    };
    return Controller;
}());
exports.Controller = Controller;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Adds a component to the view and other view components
 */
var ViewComponentAdder = /** @class */ (function () {
    function ViewComponentAdder(components, view) {
        this.components = components;
        this.view = view;
    }
    ViewComponentAdder.prototype.addComponent = function (component) {
        this.components.push(component);
        component.createComponent(this, this.view);
        return component;
    };
    return ViewComponentAdder;
}());
exports.ViewComponentAdder = ViewComponentAdder;
/**
 * Input and ouput for the application
 */
var View = /** @class */ (function () {
    function View() {
        this.components = [];
        this.initiated = false;
    }
    View.prototype.refresh = function () {
        //empty, can be overrided or not
    };
    View.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    View.prototype.preload = function () {
        //empty, can be overrided or not
    };
    View.prototype.update = function () {
        //empty, can be overrided or not
    };
    View.prototype.init = function (game, model, goTo) {
        if (!this.initiated) {
            this._game = game;
            this._model = model;
            this._goTo = goTo;
            this.createView();
            this.initiated = true;
        }
    };
    Object.defineProperty(View.prototype, "game", {
        get: function () { return this._game; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "model", {
        get: function () { return this._model; },
        enumerable: true,
        configurable: true
    });
    View.prototype.createView = function () {
        var componentAdder = new ViewComponentAdder(this.components, this);
        this.create(componentAdder);
    };
    View.prototype.updateView = function () {
        if (!this.initiated)
            return;
        this.update();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent();
        }
    };
    View.prototype.refreshView = function () {
        if (!this.initiated)
            throw EvalError('View is not rendered please render it before refresh.');
        this.refresh();
    };
    View.prototype.goTo = function (controllerName, controllerAction, params) {
        this._goTo(controllerName, controllerAction, params);
    };
    return View;
}());
exports.View = View;
/**
 * Component to be showed in view
 */
var ViewComponent = /** @class */ (function () {
    function ViewComponent() {
        this.components = [];
    }
    ViewComponent.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.update = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.createComponent = function (componentAdder, view) {
        this.view = view;
        this.create(componentAdder);
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.createComponent(componentAdder, view);
        }
    };
    ViewComponent.prototype.updateComponent = function () {
        this.update();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent();
        }
    };
    Object.defineProperty(ViewComponent.prototype, "game", {
        get: function () {
            return this.view.game;
        },
        enumerable: true,
        configurable: true
    });
    return ViewComponent;
}());
exports.ViewComponent = ViewComponent;


/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,