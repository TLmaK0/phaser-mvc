(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Phaser = __webpack_require__(4);
var rxjs_1 = __webpack_require__(1);
var guid_1 = __webpack_require__(5);
/** Bootstrap for the phaser-mvc.
 * Useage:
 * import { FrameController } from 'phaser-mvc';
 * import { LandEditorController } from 'phaser-mvc';
 * window.onload = () => {
 * const boot = new Bootstrap();
 * boot.addController('FrameController', FrameController);
 */
var Bootstrap = /** @class */ (function () {
    function Bootstrap(width, height) {
        if (width === void 0) { width = 1920; }
        if (height === void 0) { height = 1080; }
        var _this = this;
        this.width = width;
        this.height = height;
        this.controllers = {};
        this.preload = function () {
            for (var _i = 0, _a = Bootstrap.preloadComponents; _i < _a.length; _i++) {
                var preload = _a[_i];
                preload(_this.game);
            }
        };
        this.create = function () {
            _this.worldCustomizations();
            _this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            _this.goTo(_this.startAction[0], _this.startAction[1], _this.startAction[2]);
            Bootstrap.onInit.next(_this);
            Bootstrap.onInit.complete();
        };
        this.update = function () {
            for (var _i = 0, _a = Object.keys(_this.controllers); _i < _a.length; _i++) {
                var controllerName = _a[_i];
                _this.updateController(_this.controllers[controllerName]);
            }
        };
    }
    Bootstrap.preload = function (preload) {
        Bootstrap.preloadComponents.push(preload);
    };
    Bootstrap.prototype.start = function (controllerName, controllerAction, params) {
        this.startAction = [controllerName, controllerAction, params];
        this.game = new Phaser.Game(this.width, this.height, Phaser.CANVAS, 'content', { preload: this.preload,
            create: this.create,
            update: this.update });
    };
    Bootstrap.prototype.worldCustomizations = function () {
        this.game.physics.startSystem(Phaser.Physics.P2JS);
        this.worldMaterial = this.game.physics.p2.createMaterial('worldMaterial');
        Bootstrap.worldMaterialOptions = {
            restitution: 0
        };
        this.game.physics.p2.setWorldMaterial(this.worldMaterial, true, true, true, true);
        this.game.physics.p2.gravity.y = 100;
    };
    Bootstrap.prototype.createBody = function (body) {
        var physicBody = new Phaser.Physics.P2.Body(this.game, this.game.add.sprite(0, 0, null), body.x, body.y);
        var material = this.game.physics.p2.createMaterial(guid_1.Guid.newGuid(), physicBody);
        var options = body.getPhysicsConfiguration();
        this.generateContacts(material, options.material);
        return physicBody;
    };
    Bootstrap.prototype.generateContacts = function (material, options) {
        var contactOptions = {};
        for (var key in options) {
            contactOptions[key] = Bootstrap.worldMaterialOptions[key] + options[key];
        }
        var contactMaterial = this.game.physics.p2.createContactMaterial(material, this.worldMaterial, contactOptions);
    };
    Bootstrap.prototype.addController = function (name, controllerType) {
        if (this.controllers[name] != null)
            throw EvalError("Controller " + name + " already registered.");
        var controller = new controllerType();
        controller.bootstrap = this;
        this.controllers[name] = controller;
    };
    Bootstrap.prototype.goTo = function (controllerName, controllerAction, params) {
        /*tslint:disable:no-any*/
        var controller = this.controllers[controllerName];
        /*tslint:enable:no-any*/
        if (!controller) {
            throw EvalError("Controller " + controllerName + " not exist. Be sure you load it in bootstrap.");
        }
        /*tslint:disable:no-unsafe-any*/
        controller[controllerAction](params);
        /*tslint:enable:no-unsafe-any*/
    };
    Bootstrap.prototype.updateController = function (controller) {
        for (var _i = 0, _a = Object.keys(controller.views); _i < _a.length; _i++) {
            var viewName = _a[_i];
            controller.getView(viewName).updateView();
        }
    };
    Bootstrap.preloadComponents = [];
    Bootstrap.onInit = new rxjs_1.AsyncSubject();
    Bootstrap.worldMaterialOptions = {};
    return Bootstrap;
}());
exports.Bootstrap = Bootstrap;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("@reactivex/rxjs");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var watch_model_1 = __webpack_require__(8);
var rxjs_1 = __webpack_require__(1);
var _ = __webpack_require__(9);
var WatchFactory = /** @class */ (function () {
    function WatchFactory() {
        this.watchsModel = [];
    }
    WatchFactory.prototype.create = function (getModel) {
        var watchModel = new watch_model_1.WatchModel();
        watchModel.observable = rxjs_1.Observable.create(function (observer) { return watchModel.observer = observer; }).map(function (model) { return _.cloneDeep(model); }).distinctUntilChanged(function (prev, next) { return _.isEqual(prev, next); });
        watchModel.getModel = getModel;
        this.watchsModel.push(watchModel);
        return watchModel.observable;
    };
    return WatchFactory;
}());
exports.WatchFactory = WatchFactory;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bootstrap_1 = __webpack_require__(0);
exports.Bootstrap = bootstrap_1.Bootstrap;
var controller_1 = __webpack_require__(6);
exports.Controller = controller_1.Controller;
var view_1 = __webpack_require__(7);
exports.View = view_1.View;
exports.ViewComponent = view_1.ViewComponent;
var watch_factory_1 = __webpack_require__(2);
exports.WatchFactory = watch_factory_1.WatchFactory;
var physic_body_1 = __webpack_require__(10);
exports.PhysicBody = physic_body_1.PhysicBody;


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("phaser-ce");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Guid = /** @class */ (function () {
    function Guid() {
    }
    Guid.newGuid = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    return Guid;
}());
exports.Guid = Guid;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Controller accepts input from view and converts modifieds the model.
 */
var Controller = /** @class */ (function () {
    function Controller() {
        var _this = this;
        this.views = {};
        this.model = {};
        this.goTo = function (controllerName, controllerAction, params) {
            _this.bootstrap.goTo(controllerName, controllerAction, params);
        };
    }
    Object.defineProperty(Controller.prototype, "game", {
        get: function () {
            return this.bootstrap.game;
        },
        enumerable: true,
        configurable: true
    });
    Controller.prototype.getView = function (viewName) {
        var view = this.views[viewName];
        if (view == null) {
            throw EvalError("View " + viewName + " not exist. Be sure you have added it to your controller.");
        }
        return view;
    };
    Controller.prototype.render = function (view) {
        view.init(this.game, this.model, this.goTo);
    };
    Controller.prototype.refresh = function (view) {
        view.refresh();
    };
    return Controller;
}());
exports.Controller = Controller;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var watch_factory_1 = __webpack_require__(2);
/**
 * Adds a component to the view and other view components
 */
var ViewComponentAdder = /** @class */ (function () {
    function ViewComponentAdder(components, view) {
        this.components = components;
        this.view = view;
    }
    ViewComponentAdder.prototype.addComponent = function (component) {
        this.components.push(component);
        component.createComponent(this, this.view);
        return component;
    };
    return ViewComponentAdder;
}());
exports.ViewComponentAdder = ViewComponentAdder;
/**
 * Input and ouput for the application
 */
var View = /** @class */ (function () {
    function View() {
        this.components = [];
        this.initiated = false;
        this.watchFactory = new watch_factory_1.WatchFactory();
    }
    View.prototype.refresh = function () {
        //empty, can be overrided or not
    };
    View.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    View.prototype.preload = function () {
        //empty, can be overrided or not
    };
    View.prototype.update = function () {
        //empty, can be overrided or not
    };
    View.prototype.init = function (game, model, goTo) {
        if (!this.initiated) {
            this._game = game;
            this._model = model;
            this._goTo = goTo;
            this.createView();
            this.initiated = true;
        }
    };
    Object.defineProperty(View.prototype, "game", {
        get: function () { return this._game; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "model", {
        get: function () { return this._model; },
        enumerable: true,
        configurable: true
    });
    View.prototype.createView = function () {
        var componentAdder = new ViewComponentAdder(this.components, this);
        this.create(componentAdder);
        this.updateOnModelChange(this.watchFactory);
    };
    View.prototype.updateView = function () {
        if (!this.initiated)
            return;
        this.checkWatchModels();
        this.update();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent();
        }
    };
    View.prototype.refreshView = function () {
        if (!this.initiated)
            throw EvalError('View is not rendered please render it before refresh.');
        this.refresh();
    };
    View.prototype.updateOnModelChange = function (_watchFactory) {
        //this should be overrided or not
    };
    View.prototype.checkWatchModels = function () {
        for (var _i = 0, _a = this.watchFactory.watchsModel; _i < _a.length; _i++) {
            var watchModel = _a[_i];
            watchModel.observer.next(watchModel.getModel());
        }
    };
    View.prototype.goTo = function (controllerName, controllerAction, params) {
        this._goTo(controllerName, controllerAction, params);
    };
    return View;
}());
exports.View = View;
/**
 * Component to be showed in view
 */
var ViewComponent = /** @class */ (function () {
    function ViewComponent() {
        this.components = [];
    }
    ViewComponent.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.update = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.createComponent = function (componentAdder, view) {
        this.view = view;
        this.create(componentAdder);
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.createComponent(componentAdder, view);
        }
    };
    ViewComponent.prototype.updateComponent = function () {
        this.update();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent();
        }
    };
    Object.defineProperty(ViewComponent.prototype, "game", {
        get: function () {
            return this.view.game;
        },
        enumerable: true,
        configurable: true
    });
    return ViewComponent;
}());
exports.ViewComponent = ViewComponent;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WatchModel = /** @class */ (function () {
    function WatchModel() {
    }
    return WatchModel;
}());
exports.WatchModel = WatchModel;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 */
Object.defineProperty(exports, "__esModule", { value: true });
var bootstrap_1 = __webpack_require__(0);
var PhysicBody = /** @class */ (function () {
    function PhysicBody() {
        var _this = this;
        this._x = 0;
        this._y = 0;
        this._angle = 0;
        this.getX = function () { return _this._x; };
        this.getY = function () { return _this._y; };
        this.getAngle = function () { return _this._angle; };
        this.setX = function (value) { return _this._x = value; };
        this.setY = function (value) { return _this._y = value; };
        this.setAngle = function (value) { return _this._angle = value; };
        this.physics = {};
        bootstrap_1.Bootstrap.onInit.subscribe(this.onBootstrapInit.bind(this));
    }
    PhysicBody.prototype.onBootstrapInit = function (bootstrap) {
        var _this = this;
        this.body = bootstrap.createBody(this);
        this.getX = function () { return _this.body.x; };
        this.getY = function () { return _this.body.y; };
        this.getAngle = function () { return _this.body.angle; };
        this.setX = function (value) { return _this.body.x = value; };
        this.setY = function (value) { return _this.body.y = value; };
        this.setAngle = function (value) { return _this.body.angle = value; };
    };
    PhysicBody.prototype.getPhysicsConfiguration = function () {
        return this.physics;
    };
    Object.defineProperty(PhysicBody.prototype, "angle", {
        get: function () {
            return this.getAngle();
        },
        set: function (value) {
            this.setAngle(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhysicBody.prototype, "x", {
        get: function () {
            return this.getX();
        },
        set: function (value) {
            this.setX(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhysicBody.prototype, "y", {
        get: function () {
            return this.getY();
        },
        set: function (value) {
            this.setY(value);
        },
        enumerable: true,
        configurable: true
    });
    return PhysicBody;
}());
exports.PhysicBody = PhysicBody;


/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,