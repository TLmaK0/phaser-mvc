(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Phaser = __webpack_require__(4);
var rxjs_1 = __webpack_require__(1);
var guid_1 = __webpack_require__(5);
var Bootstrap = /** @class */ (function () {
    function Bootstrap() {
        var _this = this;
        this.views = [];
        this.preload = function () {
            for (var _i = 0, _a = Bootstrap.preloadComponents; _i < _a.length; _i++) {
                var preload = _a[_i];
                preload(_this.game);
            }
        };
        this.create = function () {
            _this.worldCustomizations();
            _this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            _this.defaultAction();
            Bootstrap.onInit.next(_this);
            Bootstrap.onInit.complete();
        };
        this.update = function () {
            _this.updateViews();
        };
        this.materialsAndOptions = [];
    }
    Object.defineProperty(Bootstrap, "instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    Bootstrap.preload = function (preload) {
        Bootstrap.preloadComponents.push(preload);
    };
    Bootstrap.run = function (defaultAction) {
        Bootstrap.instance.defaultAction = defaultAction;
        Bootstrap.instance.startEngines();
    };
    Bootstrap.prototype.startEngines = function () {
        this.game = new Phaser.Game(Bootstrap.worldConfiguration.bounds.width, Bootstrap.worldConfiguration.bounds.height, Phaser.CANVAS, 'content', { preload: this.preload,
            create: this.create,
            update: this.update });
    };
    Bootstrap.prototype.registerView = function (view) {
        this.views.push(view);
    };
    Bootstrap.prototype.updateViews = function () {
        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {
            var view = _a[_i];
            view.updateView();
        }
    };
    Bootstrap.prototype.worldCustomizations = function () {
        this.game.physics.startSystem(Phaser.Physics.P2JS);
        var worldMaterial = this.game.physics.p2.createMaterial('worldMaterial');
        this.materialsAndOptions.push([worldMaterial, Bootstrap.worldConfiguration.material]);
        this.game.physics.p2.setWorldMaterial(worldMaterial, true, true, true, true);
        this.game.physics.p2.gravity.y = 100;
    };
    Bootstrap.prototype.createBody = function (physicBody) {
        var sprite = this.game.add.sprite(0, 0, null);
        this.game.physics.p2.enable(sprite);
        var body = new Phaser.Physics.P2.Body(this.game, sprite, physicBody.x, physicBody.y, physicBody.mass);
        body.velocity.x = physicBody.velocity[0];
        body.velocity.y = physicBody.velocity[1];
        body.angle = physicBody.angle;
        var material = this.game.physics.p2.createMaterial(guid_1.Guid.newGuid(), body);
        var bodyOptions = physicBody.getPhysicsConfiguration();
        for (var _i = 0, _a = this.materialsAndOptions; _i < _a.length; _i++) {
            var materialAndOptions = _a[_i];
            this.generateContacts(material, bodyOptions.material, materialAndOptions[0], materialAndOptions[1]);
        }
        this.materialsAndOptions.push([material, bodyOptions.material]);
        return body;
    };
    Bootstrap.prototype.generateContacts = function (material1, options1, material2, options2) {
        var contactOptions = {};
        for (var key in options1) {
            contactOptions[key] = options1[key] + options2[key];
        }
        this.game.physics.p2.createContactMaterial(material1, material2, contactOptions);
    };
    Bootstrap.preloadComponents = [];
    Bootstrap.worldConfiguration = {
        bounds: {
            width: 1920,
            height: 1080
        },
        material: {
            restitution: 0
        }
    };
    Bootstrap.onInit = new rxjs_1.AsyncSubject();
    return Bootstrap;
}());
exports.Bootstrap = Bootstrap;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("@reactivex/rxjs");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var watch_model_1 = __webpack_require__(8);
var rxjs_1 = __webpack_require__(1);
var _ = __webpack_require__(9);
var WatchFactory = /** @class */ (function () {
    function WatchFactory() {
        this.watchsModel = [];
    }
    WatchFactory.prototype.create = function (getModel) {
        var watchModel = new watch_model_1.WatchModel();
        watchModel.observable = rxjs_1.Observable.create(function (observer) { return watchModel.observer = observer; }).map(function (model) { return _.cloneDeep(model); }).distinctUntilChanged(function (prev, next) { return _.isEqual(prev, next); });
        watchModel.getModel = getModel;
        this.watchsModel.push(watchModel);
        return watchModel.observable;
    };
    return WatchFactory;
}());
exports.WatchFactory = WatchFactory;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bootstrap_1 = __webpack_require__(0);
exports.Bootstrap = bootstrap_1.Bootstrap;
var controller_1 = __webpack_require__(6);
exports.Controller = controller_1.Controller;
var view_1 = __webpack_require__(7);
exports.View = view_1.View;
exports.ViewComponent = view_1.ViewComponent;
var watch_factory_1 = __webpack_require__(2);
exports.WatchFactory = watch_factory_1.WatchFactory;
var physic_body_1 = __webpack_require__(10);
exports.PhysicBody = physic_body_1.PhysicBody;
var view_notifier_1 = __webpack_require__(12);
exports.ViewNotifier = view_notifier_1.ViewNotifier;


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("phaser-ce");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Guid = /** @class */ (function () {
    function Guid() {
    }
    Guid.newGuid = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    return Guid;
}());
exports.Guid = Guid;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Controller accepts input from view and converts modifieds the model.
 */
var Controller = /** @class */ (function () {
    function Controller() {
    }
    return Controller;
}());
exports.Controller = Controller;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bootstrap_1 = __webpack_require__(0);
var watch_factory_1 = __webpack_require__(2);
/**
 * Adds a component to the view and other view components
 */
var ViewComponentAdder = /** @class */ (function () {
    function ViewComponentAdder(components, view) {
        this.components = components;
        this.view = view;
    }
    ViewComponentAdder.prototype.addComponent = function (component) {
        this.components.push(component);
        component.createComponent(this, this.view);
        return component;
    };
    return ViewComponentAdder;
}());
exports.ViewComponentAdder = ViewComponentAdder;
/**
 * Input and ouput for the application
 */
var View = /** @class */ (function () {
    function View(bootstrap) {
        if (bootstrap === void 0) { bootstrap = bootstrap_1.Bootstrap.instance; }
        this.bootstrap = bootstrap;
        this.components = [];
        this.watchFactory = new watch_factory_1.WatchFactory();
        bootstrap.registerView(this);
    }
    View.prototype.refresh = function () {
        //empty, can be overrided or not
    };
    View.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    View.prototype.preload = function () {
        //empty, can be overrided or not
    };
    View.prototype.update = function () {
        //empty, can be overrided or not
    };
    View.prototype.show = function () {
        this.createView();
    };
    Object.defineProperty(View.prototype, "game", {
        get: function () { return this.bootstrap.game; },
        enumerable: true,
        configurable: true
    });
    View.prototype.createView = function () {
        var componentAdder = new ViewComponentAdder(this.components, this);
        this.create(componentAdder);
        this.updateOnModelChange(this.watchFactory);
    };
    View.prototype.updateView = function () {
        this.checkWatchModels();
        this.update();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent();
        }
    };
    View.prototype.updateOnModelChange = function (_watchFactory) {
        //this should be overrided or not
    };
    View.prototype.checkWatchModels = function () {
        for (var _i = 0, _a = this.watchFactory.watchsModel; _i < _a.length; _i++) {
            var watchModel = _a[_i];
            watchModel.observer.next(watchModel.getModel());
        }
    };
    return View;
}());
exports.View = View;
/**
 * Component to be showed in view
 */
var ViewComponent = /** @class */ (function () {
    function ViewComponent() {
        this.components = [];
    }
    ViewComponent.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.update = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.createComponent = function (componentAdder, view) {
        this.view = view;
        this.create(componentAdder);
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.createComponent(componentAdder, view);
        }
    };
    ViewComponent.prototype.updateComponent = function () {
        this.update();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent();
        }
    };
    Object.defineProperty(ViewComponent.prototype, "game", {
        get: function () {
            return this.view.game;
        },
        enumerable: true,
        configurable: true
    });
    return ViewComponent;
}());
exports.ViewComponent = ViewComponent;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WatchModel = /** @class */ (function () {
    function WatchModel() {
    }
    return WatchModel;
}());
exports.WatchModel = WatchModel;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var bootstrap_1 = __webpack_require__(0);
var body_property_1 = __webpack_require__(11);
var PhysicBody = /** @class */ (function () {
    function PhysicBody() {
        this.x = 0;
        this.y = 0;
        this.angle = 0;
        this.velocity = [0, 0];
        this.mass = 1;
        this.physics = {};
        bootstrap_1.Bootstrap.onInit.subscribe(this.onBootstrapInit.bind(this));
    }
    PhysicBody.prototype.createBody = function (_body) {
    };
    PhysicBody.prototype.onBootstrapInit = function (bootstrap) {
        this.body = bootstrap.createBody(this);
        var propertyClass = this;
        for (var _i = 0, _a = propertyClass['bodyProperties']; _i < _a.length; _i++) {
            var property = _a[_i];
            propertyClass['get' + property] = propertyClass['getBody' + property];
            propertyClass['set' + property] = propertyClass['setBody' + property];
        }
        this.createBody(this.body);
    };
    PhysicBody.prototype.getPhysicsConfiguration = function () {
        return this.physics;
    };
    __decorate([
        body_property_1.BodyProperty
    ], PhysicBody.prototype, "x", void 0);
    __decorate([
        body_property_1.BodyProperty
    ], PhysicBody.prototype, "y", void 0);
    __decorate([
        body_property_1.BodyProperty
    ], PhysicBody.prototype, "angle", void 0);
    __decorate([
        body_property_1.BodyProperty
    ], PhysicBody.prototype, "velocity", void 0);
    __decorate([
        body_property_1.BodyProperty
    ], PhysicBody.prototype, "mass", void 0);
    return PhysicBody;
}());
exports.PhysicBody = PhysicBody;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function BodyProperty(target, key) {
    if (!target['bodyProperties'])
        target['bodyProperties'] = [];
    var privateKey = "_" + key;
    var upperKey = key.toUpperCase();
    var getKey = "get" + upperKey;
    var setKey = "set" + upperKey;
    var getBodyKey = "getBody" + upperKey;
    var setBodyKey = "setBody" + upperKey;
    target[getKey] = function () {
        return this[privateKey];
    };
    target[setKey] = function (value) {
        this[privateKey] = value;
    };
    target[getBodyKey] = function () {
        return this['body'][key];
    };
    target[setBodyKey] = function (value) {
        this['body'][key] = value;
    };
    function getter() {
        return this[getKey]();
    }
    function setter(value) {
        this[setKey](value);
    }
    Object.defineProperty(target, key, {
        get: getter,
        set: setter,
        enumerable: true,
        configurable: true
    });
    target['bodyProperties'].push(upperKey);
}
exports.BodyProperty = BodyProperty;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = __webpack_require__(1);
var ViewNotifier = /** @class */ (function () {
    function ViewNotifier() {
        this.subject = new rxjs_1.Subject();
        this.observable = new rxjs_1.Observable().multicast(this.subject);
    }
    ViewNotifier.prototype.subscribe = function (observer) {
        this.observable.subscribe(observer);
    };
    ViewNotifier.prototype.publish = function (value) {
        this.subject.next(value);
    };
    return ViewNotifier;
}());
exports.ViewNotifier = ViewNotifier;


/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,