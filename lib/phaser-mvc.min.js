(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Witcase = /** @class */ (function () {
    function Witcase() {
        var _this = this;
        this.views = [];
        this.create = function () {
            _this.defaultAction();
        };
        this.preload = function () {
            for (var _i = 0, _a = _this.views; _i < _a.length; _i++) {
                var view = _a[_i];
                view.preloadView();
            }
        };
        this.update = function () {
            for (var _i = 0, _a = _this.views; _i < _a.length; _i++) {
                var view = _a[_i];
                view.updateView();
            }
        };
        this.render = function () {
            for (var _i = 0, _a = _this.views; _i < _a.length; _i++) {
                var view = _a[_i];
                view.renderView();
            }
        };
    }
    Witcase.create = function () {
        Witcase.current = new Witcase();
        return Witcase.current;
    };
    Witcase.prototype.start = function (engineStarter) {
        this.engine = engineStarter(this);
    };
    Witcase.prototype.registerView = function (view) {
        this.views.push(view);
    };
    return Witcase;
}());
exports.Witcase = Witcase;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var watch_model_1 = __webpack_require__(6);
var rxjs_1 = __webpack_require__(2);
var _ = __webpack_require__(7);
var WatchFactory = /** @class */ (function () {
    function WatchFactory() {
        this.watchsModel = [];
    }
    WatchFactory.prototype.create = function (getModel) {
        var watchModel = new watch_model_1.WatchModel();
        watchModel.observable = rxjs_1.Observable.create(function (observer) { return watchModel.observer = observer; }).map(function (model) { return _.cloneDeep(model); }).distinctUntilChanged(function (prev, next) { return _.isEqual(prev, next); });
        watchModel.getModel = getModel;
        this.watchsModel.push(watchModel);
        return watchModel.observable;
    };
    return WatchFactory;
}());
exports.WatchFactory = WatchFactory;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("@reactivex/rxjs");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var witcase_1 = __webpack_require__(0);
exports.Witcase = witcase_1.Witcase;
var controller_1 = __webpack_require__(4);
exports.Controller = controller_1.Controller;
var view_1 = __webpack_require__(5);
exports.View = view_1.View;
exports.ViewComponent = view_1.ViewComponent;
var watch_factory_1 = __webpack_require__(1);
exports.WatchFactory = watch_factory_1.WatchFactory;
var view_notifier_1 = __webpack_require__(8);
exports.ViewNotifier = view_notifier_1.ViewNotifier;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Controller accepts input from view and converts modifieds the model.
 */
var Controller = /** @class */ (function () {
    function Controller() {
    }
    return Controller;
}());
exports.Controller = Controller;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var witcase_1 = __webpack_require__(0);
var watch_factory_1 = __webpack_require__(1);
/**
 * Adds a component to the view and other view components
 */
var ViewComponentAdder = /** @class */ (function () {
    function ViewComponentAdder(components, view) {
        this.components = components;
        this.view = view;
    }
    ViewComponentAdder.prototype.addComponent = function (component) {
        this.components.push(component);
        component.preloadComponent(this, this.view);
        return component;
    };
    return ViewComponentAdder;
}());
exports.ViewComponentAdder = ViewComponentAdder;
/**
 * Input and ouput for the application
 */
var View = /** @class */ (function () {
    //TODO: we should inject with typescript-ioc
    function View(witcase) {
        if (witcase === void 0) { witcase = witcase_1.Witcase.current; }
        this.witcase = witcase;
        this.components = [];
        this.watchFactory = new watch_factory_1.WatchFactory();
        this.witcase.registerView(this);
    }
    View.prototype.create = function () {
        //empty, can be overrided or not
    };
    View.prototype.preload = function (_componentAdder) {
        //empty, can be overrided or not
    };
    View.prototype.update = function () {
        //empty, can be overrided or not
    };
    View.prototype.render = function () {
        //empty, can be overrided or not
    };
    View.prototype.show = function () {
        this.createView();
    };
    Object.defineProperty(View.prototype, "engine", {
        get: function () { return this.witcase.engine; },
        enumerable: true,
        configurable: true
    });
    View.prototype.preloadView = function () {
        var componentAdder = new ViewComponentAdder(this.components, this);
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.preloadComponent(componentAdder, this);
        }
        this.preload(componentAdder);
    };
    View.prototype.createView = function () {
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.createComponent();
        }
        this.create();
        this.updateOnModelChange(this.watchFactory);
    };
    View.prototype.updateView = function () {
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent();
        }
        this.checkWatchModels();
        this.update();
    };
    View.prototype.renderView = function () {
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.renderComponent();
        }
        this.render();
    };
    View.prototype.updateOnModelChange = function (_watchFactory) {
        //this should be overrided or not
    };
    View.prototype.checkWatchModels = function () {
        for (var _i = 0, _a = this.watchFactory.watchsModel; _i < _a.length; _i++) {
            var watchModel = _a[_i];
            watchModel.observer.next(watchModel.getModel());
        }
    };
    return View;
}());
exports.View = View;
/**
 * Component to be showed in view
 */
var ViewComponent = /** @class */ (function () {
    function ViewComponent() {
        this.components = [];
    }
    ViewComponent.prototype.preload = function (_componentAdder, _view) {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.create = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.update = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.render = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.preloadComponent = function (componentAdder, view) {
        this.view = view;
        this.preload(componentAdder, view);
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.preloadComponent(componentAdder, view);
        }
    };
    ViewComponent.prototype.createComponent = function () {
        this.create();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.createComponent();
        }
    };
    ViewComponent.prototype.updateComponent = function () {
        this.update();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent();
        }
    };
    ViewComponent.prototype.renderComponent = function () {
        this.render();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.renderComponent();
        }
    };
    Object.defineProperty(ViewComponent.prototype, "engine", {
        get: function () {
            return this.view.engine;
        },
        enumerable: true,
        configurable: true
    });
    return ViewComponent;
}());
exports.ViewComponent = ViewComponent;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WatchModel = /** @class */ (function () {
    function WatchModel() {
    }
    return WatchModel;
}());
exports.WatchModel = WatchModel;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = __webpack_require__(2);
var ViewNotifier = /** @class */ (function () {
    function ViewNotifier() {
        this.subject = new rxjs_1.Subject();
        this.observable = new rxjs_1.Observable().multicast(this.subject);
    }
    ViewNotifier.prototype.subscribe = function (observer) {
        this.observable.subscribe(observer);
    };
    ViewNotifier.prototype.publish = function (value) {
        this.subject.next(value);
    };
    return ViewNotifier;
}());
exports.ViewNotifier = ViewNotifier;


/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgODExNzViZjVkOTE4OWRhZTVjZDkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dpdGNhc2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dhdGNoX2ZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiQHJlYWN0aXZleC9yeGpzXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9sbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3LnRzIiwid2VicGFjazovLy8uL3NyYy93YXRjaF9tb2RlbC50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJsb2Rhc2hcIiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld19ub3RpZmllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7QUN0REE7SUFTRTtRQUFBLGlCQUNDO1FBSE8sVUFBSyxHQUFjLEVBQUUsQ0FBQztRQWN2QixXQUFNLEdBQUc7WUFDZCxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQztRQUVNLFlBQU8sR0FBRztZQUNmLEdBQUcsQ0FBQyxDQUFlLFVBQVUsRUFBVixVQUFJLENBQUMsS0FBSyxFQUFWLGNBQVUsRUFBVixJ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LEdBQXRCO1FBQ0UsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQW9CLFVBQWUsRUFBZixTQUFJLENBQUMsVUFBVSxFQUFmLGNBQWUsRUFBZixJQUFlO1lBQWxDLElBQU0sU0FBUztZQUNsQixTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRUQsc0JBQWMsaUNBQU07YUFBcEI7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7SUFDSCxvQkFBQztBQUFELENBQUM7QUFwRHFCLHNDQUFhOzs7Ozs7Ozs7O0FDNUZuQztJQUFBO0lBSUEsQ0FBQztJQUFELGlCQUFDO0FBQUQsQ0FBQztBQUpZLGdDQUFVOzs7Ozs7O0FDRnZCLG1DOzs7Ozs7Ozs7QUNBQSxvQ0FBZ0U7QUFFaEU7SUFJRTtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksaUJBQVUsRUFBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVNLGdDQUFTLEdBQWhCLFVBQWlCLFFBQXdCO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSw4QkFBTyxHQUFkLFVBQWUsS0FBUztRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDO0FBaEJZLG9DQUFZIiwiZmlsZSI6InBoYXNlci1tdmMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgODExNzViZjVkOTE4OWRhZTVjZDkiLCIvKipcbiAqL1xuaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgeyBCYXNlRW5naW5lIH0gZnJvbSAnLi9iYXNlX2VuZ2luZSc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IEd1aWQgfSBmcm9tICcuL2d1aWQnO1xuXG5leHBvcnQgY2xhc3MgV2l0Y2FzZTxUPiBpbXBsZW1lbnRzIEJhc2VFbmdpbmUge1xuICBwdWJsaWMgZW5naW5lOiBUO1xuXG4gIHB1YmxpYyBkZWZhdWx0QWN0aW9uOiAoKSA9PiB2b2lkO1xuXG4gIHB1YmxpYyBzdGF0aWMgY3VycmVudDogYW55O1xuXG4gIHByaXZhdGUgdmlld3M6IFZpZXc8VD5bXSA9IFtdO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKXtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlPFQ+KCl7XG4gICAgV2l0Y2FzZS5jdXJyZW50ID0gbmV3IFdpdGNhc2U8VD4oKTtcbiAgICByZXR1cm4gV2l0Y2FzZS5jdXJyZW50O1xuICB9XG5cbiAgcHVibGljIHN0YXJ0KGVuZ2luZVN0YXJ0ZXI6IChiYXNlRW5naW5lOiBCYXNlRW5naW5lKSA9PiBUKTogdm9pZCB7XG4gICAgdGhpcy5lbmdpbmUgPSBlbmdpbmVTdGFydGVyKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZSA9ICgpOiB2b2lkID0+IHtcbiAgICB0aGlzLmRlZmF1bHRBY3Rpb24oKTtcbiAgfVxuXG4gIHB1YmxpYyBwcmVsb2FkID0gKCk6IHZvaWQgPT4ge1xuICAgIGZvciAoY29uc3QgdmlldyBvZiB0aGlzLnZpZXdzKXtcbiAgICAgIHZpZXcucHJlbG9hZFZpZXcoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlID0gKCk6IHZvaWQgPT4ge1xuICAgIGZvciAoY29uc3QgdmlldyBvZiB0aGlzLnZpZXdzKXtcbiAgICAgIHZpZXcudXBkYXRlVmlldygpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIgPSAoKTogdm9pZCA9PiB7XG4gICAgZm9yIChjb25zdCB2aWV3IG9mIHRoaXMudmlld3Mpe1xuICAgICAgdmlldy5yZW5kZXJWaWV3KCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyVmlldyh2aWV3OiBWaWV3PFQ+KXtcbiAgICB0aGlzLnZpZXdzLnB1c2godmlldyk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy93aXRjYXNlLnRzIiwiaW1wb3J0IHsgV2F0Y2hNb2RlbCB9IGZyb20gJy4vd2F0Y2hfbW9kZWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICdAcmVhY3RpdmV4L3J4anMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgY2xhc3MgV2F0Y2hGYWN0b3J5IHtcbiAgcHVibGljIHdhdGNoc01vZGVsOiBXYXRjaE1vZGVsPGFueT5bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCl7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlPFQ+KGdldE1vZGVsOiAoKSA9PiBUKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgY29uc3Qgd2F0Y2hNb2RlbCA9IG5ldyBXYXRjaE1vZGVsPFQ+KCk7XG5cbiAgICB3YXRjaE1vZGVsLm9ic2VydmFibGUgPSBPYnNlcnZhYmxlLmNyZWF0ZShcbiAgICAgIChvYnNlcnZlcjogT2JzZXJ2ZXI8KCkgPT4gVD4pID0+IHdhdGNoTW9kZWwub2JzZXJ2ZXIgPSBvYnNlcnZlclxuICAgICkubWFwKFxuICAgICAgKG1vZGVsOiBUKSA9PiBfLmNsb25lRGVlcChtb2RlbClcbiAgICApLmRpc3RpbmN0VW50aWxDaGFuZ2VkKFxuICAgICAgKHByZXY6IFQsIG5leHQ6IFQpID0+IF8uaXNFcXVhbChwcmV2LCBuZXh0KVxuICAgICk7XG5cbiAgICB3YXRjaE1vZGVsLmdldE1vZGVsID0gZ2V0TW9kZWw7XG5cbiAgICB0aGlzLndhdGNoc01vZGVsLnB1c2god2F0Y2hNb2RlbCk7IFxuXG4gICAgcmV0dXJuIHdhdGNoTW9kZWwub2JzZXJ2YWJsZTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3dhdGNoX2ZhY3RvcnkudHMiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJAcmVhY3RpdmV4L3J4anNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJAcmVhY3RpdmV4L3J4anNcIlxuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgeyBXaXRjYXNlIH0gZnJvbSAnLi93aXRjYXNlJztcbmV4cG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICcuL2NvbnRyb2xsZXInO1xuZXhwb3J0IHsgVmlldywgVmlld0NvbXBvbmVudCB9IGZyb20gJy4vdmlldyc7XG5leHBvcnQgeyBXYXRjaEZhY3RvcnkgfSBmcm9tICcuL3dhdGNoX2ZhY3RvcnknO1xuZXhwb3J0IHsgVmlld05vdGlmaWVyIH0gZnJvbSAnLi92aWV3X25vdGlmaWVyJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC50cyIsIi8qKlxuICogQ29udHJvbGxlciBhY2NlcHRzIGlucHV0IGZyb20gdmlldyBhbmQgY29udmVydHMgbW9kaWZpZWRzIHRoZSBtb2RlbC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbnRyb2xsZXIge1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRyb2xsZXIudHMiLCJpbXBvcnQgeyBXaXRjYXNlIH0gZnJvbSAnLi93aXRjYXNlJztcbmltcG9ydCB7IFdhdGNoTW9kZWwgfSBmcm9tICcuL3dhdGNoX21vZGVsJztcbmltcG9ydCB7IFdhdGNoRmFjdG9yeSB9IGZyb20gJy4vd2F0Y2hfZmFjdG9yeSc7XG5cbi8qKlxuICogQWRkcyBhIGNvbXBvbmVudCB0byB0aGUgdmlldyBhbmQgb3RoZXIgdmlldyBjb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWV3Q29tcG9uZW50QWRkZXI8VD4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBvbmVudHM6IFZpZXdDb21wb25lbnQ8VD5bXSwgcHJpdmF0ZSB2aWV3OiBWaWV3PFQ+KSB7fVxuXG4gIHB1YmxpYyBhZGRDb21wb25lbnQ8UyBleHRlbmRzIFZpZXdDb21wb25lbnQ8VD4+KGNvbXBvbmVudDogUyk6IFMge1xuICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgY29tcG9uZW50LnByZWxvYWRDb21wb25lbnQodGhpcywgdGhpcy52aWV3KTtcblxuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cbn1cblxuLyoqXG4gKiBJbnB1dCBhbmQgb3VwdXQgZm9yIHRoZSBhcHBsaWNhdGlvblxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmlldzxUPiB7XG4gIHByb3RlY3RlZCBjb21wb25lbnRzOiBWaWV3Q29tcG9uZW50PFQ+W10gPSBbXTtcbiAgcHJpdmF0ZSB3YXRjaEZhY3Rvcnk6IFdhdGNoRmFjdG9yeSA9IG5ldyBXYXRjaEZhY3RvcnkoKTtcblxuICAvL1RPRE86IHdlIHNob3VsZCBpbmplY3Qgd2l0aCB0eXBlc2NyaXB0LWlvY1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHdpdGNhc2U6IFdpdGNhc2U8VD4gPSBXaXRjYXNlLmN1cnJlbnQpe1xuICAgIHRoaXMud2l0Y2FzZS5yZWdpc3RlclZpZXcodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlKCkge1xuICAgIC8vZW1wdHksIGNhbiBiZSBvdmVycmlkZWQgb3Igbm90XG4gIH1cbiAgcHVibGljIHByZWxvYWQoX2NvbXBvbmVudEFkZGVyOiBWaWV3Q29tcG9uZW50QWRkZXI8VD4pIHtcbiAgICAvL2VtcHR5LCBjYW4gYmUgb3ZlcnJpZGVkIG9yIG5vdFxuICB9XG4gIHB1YmxpYyB1cGRhdGUoKSB7XG4gICAgLy9lbXB0eSwgY2FuIGJlIG92ZXJyaWRlZCBvciBub3RcbiAgfVxuICBwdWJsaWMgcmVuZGVyKCkge1xuICAgIC8vZW1wdHksIGNhbiBiZSBvdmVycmlkZWQgb3Igbm90XG4gIH1cblxuICBwdWJsaWMgc2hvdygpIHtcbiAgICB0aGlzLmNyZWF0ZVZpZXcoKTtcbiAgfVxuXG4gIGdldCBlbmdpbmUoKTogVCB7IHJldHVybiB0aGlzLndpdGNhc2UuZW5naW5lOyB9XG5cbiAgcHVibGljIHByZWxvYWRWaWV3KCkge1xuICAgIGNvbnN0IGNvbXBvbmVudEFkZGVyID0gbmV3IFZpZXdDb21wb25lbnRBZGRlcih0aGlzLmNvbXBvbmVudHMsIHRoaXMpO1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LnByZWxvYWRDb21wb25lbnQoY29tcG9uZW50QWRkZXIsIHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLnByZWxvYWQoY29tcG9uZW50QWRkZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVWaWV3KCkge1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LmNyZWF0ZUNvbXBvbmVudCgpO1xuICAgIH1cbiAgICB0aGlzLmNyZWF0ZSgpO1xuICAgIHRoaXMudXBkYXRlT25Nb2RlbENoYW5nZSh0aGlzLndhdGNoRmFjdG9yeSk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlVmlldygpIHtcbiAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiB0aGlzLmNvbXBvbmVudHMpIHtcbiAgICAgIGNvbXBvbmVudC51cGRhdGVDb21wb25lbnQoKTtcbiAgICB9XG4gICAgdGhpcy5jaGVja1dhdGNoTW9kZWxzKCk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXJWaWV3KCkge1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LnJlbmRlckNvbXBvbmVudCgpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZU9uTW9kZWxDaGFuZ2UoX3dhdGNoRmFjdG9yeTogV2F0Y2hGYWN0b3J5KXtcbiAgICAvL3RoaXMgc2hvdWxkIGJlIG92ZXJyaWRlZCBvciBub3RcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tXYXRjaE1vZGVscygpe1xuICAgIGZvcihjb25zdCB3YXRjaE1vZGVsIG9mIHRoaXMud2F0Y2hGYWN0b3J5LndhdGNoc01vZGVsKXtcbiAgICAgIHdhdGNoTW9kZWwub2JzZXJ2ZXIubmV4dCh3YXRjaE1vZGVsLmdldE1vZGVsKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENvbXBvbmVudCB0byBiZSBzaG93ZWQgaW4gdmlld1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmlld0NvbXBvbmVudDxUPiB7XG4gIHB1YmxpYyB2aWV3OiBWaWV3PFQ+O1xuICBwcm90ZWN0ZWQgY29tcG9uZW50czogVmlld0NvbXBvbmVudDxUPltdID0gW107XG5cbiAgcHVibGljIHByZWxvYWQoX2NvbXBvbmVudEFkZGVyOiBWaWV3Q29tcG9uZW50QWRkZXI8VD4sIF92aWV3OiBWaWV3PFQ+KTogdm9pZCB7XG4gICAgLy9lbXB0eSwgY2FuIGJlIG92ZXJyaWRlZCBvciBub3RcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGUoKTogdm9pZCB7XG4gICAgLy9lbXB0eSwgY2FuIGJlIG92ZXJyaWRlZCBvciBub3RcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgLy9lbXB0eSwgY2FuIGJlIG92ZXJyaWRlZCBvciBub3RcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKTogdm9pZCB7XG4gICAgLy9lbXB0eSwgY2FuIGJlIG92ZXJyaWRlZCBvciBub3RcbiAgfVxuXG4gIHB1YmxpYyBwcmVsb2FkQ29tcG9uZW50KGNvbXBvbmVudEFkZGVyOiBWaWV3Q29tcG9uZW50QWRkZXI8VD4sIHZpZXc6IFZpZXc8VD4pOiB2b2lkIHtcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgIHRoaXMucHJlbG9hZChjb21wb25lbnRBZGRlciwgdmlldyk7XG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICBjb21wb25lbnQucHJlbG9hZENvbXBvbmVudChjb21wb25lbnRBZGRlciwgdmlldyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNyZWF0ZUNvbXBvbmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLmNyZWF0ZSgpO1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LmNyZWF0ZUNvbXBvbmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVDb21wb25lbnQoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiB0aGlzLmNvbXBvbmVudHMpIHtcbiAgICAgIGNvbXBvbmVudC51cGRhdGVDb21wb25lbnQoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyQ29tcG9uZW50KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICBjb21wb25lbnQucmVuZGVyQ29tcG9uZW50KCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBlbmdpbmUoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMudmlldy5lbmdpbmU7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy92aWV3LnRzIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICdAcmVhY3RpdmV4L3J4anMnO1xuXG5leHBvcnQgY2xhc3MgV2F0Y2hNb2RlbDxUPiB7XG4gIG9ic2VydmFibGU6IE9ic2VydmFibGU8VD47XG4gIG9ic2VydmVyOiBPYnNlcnZlcjwoKSA9PiBUPjtcbiAgZ2V0TW9kZWw6ICgpID0+IFQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvd2F0Y2hfbW9kZWwudHMiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJsb2Rhc2hcIlxuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciwgU3ViamVjdCB9IGZyb20gJ0ByZWFjdGl2ZXgvcnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBWaWV3Tm90aWZpZXI8VD4ge1xuICBwcml2YXRlIG9ic2VydmFibGU6IE9ic2VydmFibGU8VD47XG4gIHByaXZhdGUgc3ViamVjdDogU3ViamVjdDxUPjtcblxuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHRoaXMuc3ViamVjdCA9IG5ldyBTdWJqZWN0PFQ+KCk7XG4gICAgdGhpcy5vYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8VD4oKS5tdWx0aWNhc3QodGhpcy5zdWJqZWN0KTtcbiAgfVxuXG4gIHB1YmxpYyBzdWJzY3JpYmUob2JzZXJ2ZXI6ICh0OiBUKSA9PiB2b2lkKXtcbiAgICB0aGlzLm9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgfVxuXG4gIHB1YmxpYyBwdWJsaXNoKHZhbHVlPzogVCl7XG4gICAgdGhpcy5zdWJqZWN0Lm5leHQodmFsdWUpO1xuICB9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy92aWV3X25vdGlmaWVyLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==